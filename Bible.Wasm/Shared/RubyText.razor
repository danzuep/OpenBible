@using System.Text.Json
@using Bible.Core.Models
@inject JsStorageService JsStorageService

<div>
    <label for="toggleRuby" class="mb-3 d-inline-flex align-items-center" style="cursor:pointer;">
        <input id="toggleRuby" type="checkbox" @bind="ShowRuby" class="me-2" />
        Show Pronunciation (ruby text)
    </label>

    @foreach (var paragraph in Paragraphs)
    {
        <p>
            @for (int i = 0; i < paragraph.Count; i++)
            {
                <sup>@(paragraph[i].Number)</sup>
                @foreach (var word in paragraph[i])
                {
                    if (!string.IsNullOrEmpty(word.Pronunciation))
                    {
                        <ruby>
                            @word.Text
                            <rt class="@(_showRuby ? "visible" : "hidden")">@word.Pronunciation</rt>
                        </ruby>
                    }
                    else
                    {
                        @word.Text
                    }
@* 
                    @if (word.FootnoteId.HasValue)
                    {
                        <sup class="footnote-ref">
                            <a href="#footnote-@word.FootnoteId" id="ref-@word.FootnoteId" aria-describedby="footnote-desc-@word.FootnoteId" 
                               @onclick="(e) => ScrollToFootnote(word.FootnoteId.Value)" style="cursor:pointer;">
                                [@word.FootnoteId]
                            </a>
                        </sup>
                    }
 *@
                    <!-- use <span> </span> for space between words if needed -->
                }
            }
        </p>
    }

    @if (Footnotes.Count > 0)
    {
        <section class="footnotes">
            <h2>Footnotes</h2>
            <ol>
                @foreach (var footnote in Footnotes)
                {
                    <li id="footnote-@footnote.Id" aria-label="Footnote @footnote.Id" tabindex="-1">
                        @* <span id="footnote-desc-@footnote.Id" class="visually-hidden">Footnote</span> *@
                        [@footnote.Id] @footnote.Content
                        <a href="#ref-@footnote.Id" class="footnote-backref" aria-label="Back to reference [@footnote.Id]">↩</a>
                    </li>
                }
            </ol>
        </section>
    }
</div>

<style>
    rt {
        font-size: 0.5em;
        color: gray;
        position: relative;
        top: -0.5em;
    }
    rt.visible {
        visibility: visible;
    }
    rt.hidden {
        visibility: hidden;
    }
    sup.footnote-ref {
        font-size: 0.75em;
        line-height: 0;
    }
    sup.footnote-ref a {
        text-decoration: none;
        color: #007BFF;
    }
    sup.footnote-ref a:hover,
    sup.footnote-ref a:focus {
        text-decoration: underline;
        outline: none;
    }
    section.footnotes {
        border-top: 1px solid #ccc;
        margin-top: 2rem;
        padding-top: 1rem;
        font-size: 0.9em;
        color: #555;
    }
    section.footnotes h2 {
        font-weight: bold;
        margin-bottom: 0.5rem;
    }
    section.footnotes ol {
        padding-left: 1.5rem;
    }
    section.footnotes li {
        margin-bottom: 0.5rem;
        position: relative;
    }
    a.footnote-backref {
        margin-left: 0.5rem;
        font-size: 0.8em;
        text-decoration: none;
        color: #666;
    }
    a.footnote-backref:hover,
    a.footnote-backref:focus {
        text-decoration: underline;
        outline: none;
    }
    .visually-hidden {
        position: absolute !important;
        height: 1px; width: 1px;
        overflow: hidden;
        clip: rect(1px,1px,1px,1px);
        white-space: nowrap;
    }
</style>

@code {
    [Parameter]
    public BibleParagraphList Paragraphs { get; set; } = new();

    [Parameter]
    public BibleFootnoteList Footnotes { get; set; } = new();

    private static readonly string _storageKey = "showRubyToggle";

    private bool _showRuby;
    private bool ShowRuby
    {
        get => _showRuby;
        set
        {
            if (_showRuby != value)
            {
                _showRuby = value;
                _ = JsStorageService.SetItemAsync(_storageKey, _showRuby.ToString());
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var savedValue = await JsStorageService.GetItemAsync(_storageKey);
        if (bool.TryParse(savedValue, out var showRubySavedStatus))
        {
            _showRuby = showRubySavedStatus;
        }
    }
}