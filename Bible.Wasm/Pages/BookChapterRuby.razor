@page "/{Language=eng}/{BibleVersion=WEBBE}/{BookCode=JHN}/{ChapterNumber:int}"
@using System.Diagnostics.CodeAnalysis
@using Bible.Backend.Adapters
@using Bible.Backend.Services
@using Bible.Core.Models
@using Bible.Data;
@using System.Text

@if (_bibleBook is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="d-flex flex-column align-center">
        <MudPagination BoundaryCount="1" MiddleCount="3" Count="@_chapterCount" Selected="@ChapterNumber" SelectedChanged="ChapterChanged" Class="mt-4" />
    </div>

    <h2 style="color: dimgrey;">@_reference</h2>

    <RubyText Paragraphs="@_paragraphs" Footnotes="@_footnotes" />

    <br />
}

@code {
    [Parameter, EditorRequired]
    public string? Language { get; set; }

    [Parameter, EditorRequired]
    public string? BibleVersion { get; set; }

    [Parameter, EditorRequired]
    public string? BookCode { get; set; }

    [Parameter]
    public int ChapterNumber { get; set; } = 1;

    string page => $"{BookCode}/{ChapterNumber}";

    string? _reference;
    BibleBook? _bibleBook;
    BibleParagraphList? _paragraphs;
    BibleFootnoteList? _footnotes;
    int _chapterCount => _bibleBook?.ChapterCount ?? 0;
    MarkupString? _bibleVerses;
    List<BibleFootnote> _verseNotes = new();

    [Inject]
    private BibleBookService BibleBookService { get; set; } = default!;

    protected override async Task OnParametersSetAsync()
    {
        _bibleBook = await BibleBookService.GetBibleBookAsync(Language, BibleVersion, BookCode);
        await LoadChapterAsync(ChapterNumber);
    }

    private async Task LoadChapterAsync(int chapterNumber)
    {
        ChapterNumber = chapterNumber;
        _verseNotes.Clear();

        var bibleChapter = _bibleBook?.Chapters.FirstOrDefault(c => c.Id == ChapterNumber);
        if (bibleChapter == null)
            return;

        _reference = bibleChapter.Reference.ToReference();

        var chapter = new StringBuilder();
        foreach (var bibleVerse in bibleChapter.Verses)
        {
            (var verseMarkup, var footnotes) = bibleVerse.SplitVerseFootnotes();
            var verse = BibleBookExtensions.ToRubyRunes(verseMarkup, BibleBookService.Unihan);
            chapter.Append(verse).Append(" ");
            _verseNotes.AddRange(footnotes);
        }
        _bibleVerses = (MarkupString)chapter.ToString();

        await InvokeAsync(StateHasChanged);
    }

    private void ChapterChanged(int chapterNumber)
    {
        _ = LoadChapterAsync(chapterNumber);
    }
}