@page "/enrich"
@using Bible.Backend.Services
@using Unihan.Models
@using Unihan.Services
@inject UnihanService UnihanService

<PageTitle>Converter</PageTitle>

<h3>Send Paragraph Content</h3>

<p>This component enriches Unicode Han characters with metadata.</p>

<div class="mb-3">
    <label for="contentInput" class="form-label">Enter paragraph(s):</label>
    <br />
    <textarea id="contentInput" class="form-control" rows="8" @bind="ParagraphContent" placeholder="Enter text here..."></textarea>
</div>

<button class="btn btn-primary" @onclick="EnrichContent" disabled="@IsEnriching">
    @(IsEnriching ? "Enriching..." : "Enrich Text")
</button>

<br />

<div class="mb-3">
    <label for="contentOutput" class="form-label">Result:</label>
    <br />
    <textarea id="contentOutput" class="form-control" rows="8" @bind="ParagraphResult"></textarea>
</div>

@if (!string.IsNullOrEmpty(StatusMessage))
{
    <div class="mt-3 alert @StatusClass" role="alert">
        @StatusMessage
    </div>
}

@code {
    private string ParagraphContent { get; set; } = string.Empty;
    private string ParagraphResult { get; set; } = string.Empty;
    private bool IsEnriching = false;
    private string StatusMessage = string.Empty;
    private string StatusClass = "";

    private async Task EnrichContent()
    {
        IsEnriching = true;
        StatusMessage = string.Empty;

        try
        {
            #if DEBUG
            if (string.IsNullOrEmpty(ParagraphContent))
                ParagraphContent = "新改訳聖書刊行会";
            #endif
            // var metadata = await UnihanService.ParseAsync(ParagraphContent, UnihanField.kCantonese);
            var metadata = await UnihanService.ParseUnihanRunesAsync(ParagraphContent, UnihanField.kCantonese);
            ParagraphResult = metadata.ToString();
        }
        catch (Exception ex)
        {
            StatusMessage = $"Exception: {ex.Message}";
            StatusClass = "alert-danger";
        }
        finally
        {
            IsEnriching = false;
        }
    }
}