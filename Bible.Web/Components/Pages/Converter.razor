@page "/converter"
@rendermode InteractiveServer

@inject BackendApiClient BackendApi

<PageTitle>Converter</PageTitle>

<h3>Send Paragraph Content</h3>

<p>This component demonstrates showing data loaded from a backend API service.</p>

<div class="mb-3">
    <label for="contentInput" class="form-label">Enter paragraph(s):</label>
    <textarea id="contentInput" class="form-control" rows="8" @bind="ParagraphContent" placeholder="Enter text here..."></textarea>
</div>

<button class="btn btn-primary" @onclick="SendContent" disabled="@IsSending">
    @(IsSending ? "Sending..." : "Send to API")
</button>

<br />

<div class="mb-3">
    <label for="contentOutput" class="form-label">Result:</label>
    <textarea id="contentOutput" class="form-control" rows="8" @bind="ParagraphResult"></textarea>
</div>

@if (!string.IsNullOrEmpty(StatusMessage))
{
    <div class="mt-3 alert @StatusClass" role="alert">
        @StatusMessage
    </div>
}

@code {
    private string ParagraphContent { get; set; } = string.Empty;
    private string ParagraphResult { get; set; } = string.Empty;
    private bool IsSending = false;
    private string StatusMessage = string.Empty;
    private string StatusClass = "";

    private async Task SendContent()
    {
        IsSending = true;
        StatusMessage = string.Empty;

        try
        {
            ParagraphResult = await BackendApi.PostConvertedAsync(ParagraphContent);
        }
        catch (Exception ex)
        {
            StatusMessage = $"Exception: {ex.Message}";
            StatusClass = "alert-danger";
        }
        finally
        {
            IsSending = false;
        }
    }
}