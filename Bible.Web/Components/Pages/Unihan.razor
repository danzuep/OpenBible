@page "/unihan"
@using Bible.ServiceDefaults.Models
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@inject BackendApiClient BackendApi

<PageTitle>Unihan</PageTitle>

<h1>Unihan</h1>

<p>This component demonstrates showing data loaded from a backend API service.</p>

@if (unicodeCharacters == null || unicodeCharacters.Length == 0)
{
    <p>No characters to display.</p>
}
else
{
    @foreach (var character in unicodeCharacters)
    {
        <table class="table table-bordered table-striped mb-4">
            <thead>
                <tr>
                    <th>Field</th>
                    <th>Value(s)</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><strong>Character</strong></td>
                    <td>@character.Character</td>
                </tr>

                @foreach (var kvp in character.Metadata)
                {
                    <tr>
                        <td>@kvp.Key</td>
                        <td>
                            @foreach (var value in kvp.Value)
                            {
                                <div>@value</div>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private UnihanCharacter[]? unicodeCharacters;

    protected override async Task OnInitializedAsync()
    {
        unicodeCharacters = await BackendApi.GetUnihanAsync("");
    }
}
